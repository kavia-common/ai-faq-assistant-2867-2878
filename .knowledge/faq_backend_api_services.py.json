{"is_source_file": true, "format": "Python", "description": "This file defines a service for managing and querying a knowledge base using vector similarity. It includes classes for building an in-memory TF-IDF based vector index, performing similarity searches, and a RAG pipeline class for retrieving relevant knowledge entries and generating answers based on them. The file also initializes a singleton instance of the RAGService.", "external_files": ["./models.py"], "external_methods": ["KnowledgeBaseEntry.objects.filter", "KnowledgeBaseEntry.objects.filter (id__in=)"], "published": ["rag_service"], "classes": [{"name": "SimpleVectorIndex", "description": "A lightweight in-memory vector index that uses TF-IDF for text vectorization and cosine similarity for retrieving relevant documents."}, {"name": "RAGService", "description": "A retrieval-augmented generation service that loads knowledge base entries, performs similarity search, and generates answers based on retrieved contexts."}], "methods": [{"name": "build(self, corpus: List[str], ids: List[int])", "description": "Builds the vector index from a list of corpus texts and their associated IDs.", "scope": "SimpleVectorIndex", "scopeKind": "class"}, {"name": "List[Tuple[int,float]] search(self, query: str, top_k: int = 5)", "description": "Searches for the top_k most similar entries to the query in the vector space.", "scope": "SimpleVectorIndex", "scopeKind": "class"}, {"name": "_load_index(self)", "description": "Internal method to load active knowledge base entries into the vector index.", "scope": "RAGService", "scopeKind": "class"}, {"name": "refresh_index(self)", "description": "Reloads the knowledge base entries into the index.", "scope": "RAGService", "scopeKind": "class"}, {"name": "List[KnowledgeBaseEntry] retrieve(self, question: str, k: int = 5)", "description": "Retrieves relevant knowledge base entries based on a question.", "scope": "RAGService", "scopeKind": "class"}, {"name": "str generate(self, question: str, contexts: List[KnowledgeBaseEntry])", "description": "Generates a text answer based on the contexts (retrieved entries). Placeholder for an LLM call.", "scope": "RAGService", "scopeKind": "class"}, {"name": "Tuple[str,List[Dict],int] ask(self, question: str)", "description": "Performs retrieval and generation to produce an answer with contextual information, returning answer, contexts, and latency.", "scope": "RAGService", "scopeKind": "class"}, {"name": "__init__(self)", "scope": "SimpleVectorIndex", "scopeKind": "class", "description": "unavailable"}], "calls": ["KnowledgeBaseEntry.objects.filter", "KnowledgeBaseEntry.objects.filter (id__in=)"], "search-terms": ["SimpleVectorIndex", "RAG pipeline", "knowledge base retrieval", "TF-IDF vectorization", "cosine similarity", "knowledge base entries", "Llama or LLM placeholder", "question-answer generation"], "state": 2, "file_id": 20, "knowledge_revision": 55, "git_revision": "cf3013cbb5fbc991f3f53824bf0bf0a638d21827", "revision_history": [{"42": ""}, {"54": ""}, {"55": "cf3013cbb5fbc991f3f53824bf0bf0a638d21827"}], "ctags": [{"_type": "tag", "name": "RAGService", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^class RAGService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "SimpleVectorIndex", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^class SimpleVectorIndex:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "SimpleVectorIndex", "scopeKind": "class"}, {"_type": "tag", "name": "_load_index", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def _load_index(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "ask", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def ask(self, question: str) -> Tuple[str, List[Dict], int]:$/", "language": "Python", "typeref": "typename:Tuple[str,List[Dict],int]", "kind": "member", "signature": "(self, question: str)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "build", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def build(self, corpus: List[str], ids: List[int]):$/", "language": "Python", "kind": "member", "signature": "(self, corpus: List[str], ids: List[int])", "scope": "SimpleVectorIndex", "scopeKind": "class"}, {"_type": "tag", "name": "generate", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def generate(self, question: str, contexts: List[KnowledgeBaseEntry]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, question: str, contexts: List[KnowledgeBaseEntry])", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "np", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^import numpy as np$/", "language": "Python", "kind": "namespace", "nameref": "module:numpy"}, {"_type": "tag", "name": "rag_service", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^rag_service = RAGService()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "refresh_index", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def refresh_index(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "retrieve", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def retrieve(self, question: str, k: int = 5) -> List[KnowledgeBaseEntry]:$/", "language": "Python", "typeref": "typename:List[KnowledgeBaseEntry]", "kind": "member", "signature": "(self, question: str, k: int = 5)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def search(self, query: str, top_k: int = 5) -> List[Tuple[int, float]]:$/", "language": "Python", "typeref": "typename:List[Tuple[int,float]]", "kind": "member", "signature": "(self, query: str, top_k: int = 5)", "scope": "SimpleVectorIndex", "scopeKind": "class"}], "hash": "91baa845f9a6cdf79f41013b9370e348", "format-version": 4, "code-base-name": "faq_backend", "filename": "faq_backend/api/services.py", "fields": [{"name": "rag_service = RAGService()", "scope": "", "scopeKind": "", "description": "unavailable"}]}