{"is_source_file": true, "format": "Python", "description": "This file contains Python classes implementing a simple in-memory TF-IDF vector index and a Retrieval-Augmented Generation (RAG) service that interacts with a knowledge base to retrieve relevant entries and generate responses. It acts as part of a backend API for a question-answering system.", "external_files": ["./models"], "external_methods": ["KnowledgeBaseEntry.objects.filter", "KnowledgeBaseEntry.objects.filter(id__in)"], "published": ["rag_service"], "classes": [{"name": "SimpleVectorIndex", "description": "A lightweight vector index using TF-IDF for searching text similarity."}, {"name": "RAGService", "description": "A service that retrieves relevant knowledge base entries and generates answers using a placeholder for an LLM."}], "methods": [{"name": "__init__(self)", "description": "Initializes the vector index or RAGService, setting up necessary components.", "scope": "SimpleVectorIndex", "scopeKind": "class"}, {"name": "build(self, corpus: List[str], ids: List[int])", "description": "Builds the vector index from a corpus of texts and their associated IDs.", "scope": "SimpleVectorIndex", "scopeKind": "class"}, {"name": "List[Tuple[int,float]] search(self, query: str, top_k: int = 5)", "description": "Performs a cosine similarity search for a query within the index, returning top-k results.", "scope": "SimpleVectorIndex", "scopeKind": "class"}, {"name": "_load_index(self)", "description": "Loads active knowledge base entries and builds the vector index.", "scope": "RAGService", "scopeKind": "class"}, {"name": "refresh_index(self)", "description": "Reloads the knowledge base entries and rebuilds the index.", "scope": "RAGService", "scopeKind": "class"}, {"name": "List[KnowledgeBaseEntry] retrieve(self, question: str, k: int = 5)", "description": "Retrieves relevant knowledge base entries for a question.", "scope": "RAGService", "scopeKind": "class"}, {"name": "str generate(self, question: str, contexts: List[KnowledgeBaseEntry])", "description": "Generates an answer based on retrieved contexts, simulating an LLM call.", "scope": "RAGService", "scopeKind": "class"}, {"name": "Tuple[str,List[Dict],int] ask(self, question: str)", "description": "Performs retrieval and generation to produce a final answer, with timing.", "scope": "RAGService", "scopeKind": "class"}], "calls": ["KnowledgeBaseEntry.objects.filter", "KnowledgeBaseEntry.objects.filter"], "search-terms": ["SimpleVectorIndex", "RAGService", "TF-IDF text search", "knowledge base retrieval", "question answering", "vector similarity", "LlamaIndex", "retrieval augmented generation"], "state": 2, "file_id": 20, "knowledge_revision": 54, "git_revision": "", "revision_history": [{"42": ""}, {"54": ""}], "ctags": [{"_type": "tag", "name": "RAGService", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^class RAGService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "SimpleVectorIndex", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^class SimpleVectorIndex:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "SimpleVectorIndex", "scopeKind": "class"}, {"_type": "tag", "name": "_load_index", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def _load_index(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "ask", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def ask(self, question: str) -> Tuple[str, List[Dict], int]:$/", "language": "Python", "typeref": "typename:Tuple[str,List[Dict],int]", "kind": "member", "signature": "(self, question: str)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "build", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def build(self, corpus: List[str], ids: List[int]):$/", "language": "Python", "kind": "member", "signature": "(self, corpus: List[str], ids: List[int])", "scope": "SimpleVectorIndex", "scopeKind": "class"}, {"_type": "tag", "name": "generate", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def generate(self, question: str, contexts: List[KnowledgeBaseEntry]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, question: str, contexts: List[KnowledgeBaseEntry])", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "np", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^import numpy as np$/", "language": "Python", "kind": "namespace", "nameref": "module:numpy"}, {"_type": "tag", "name": "rag_service", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^rag_service = RAGService()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "refresh_index", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def refresh_index(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "retrieve", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def retrieve(self, question: str, k: int = 5) -> List[KnowledgeBaseEntry]:$/", "language": "Python", "typeref": "typename:List[KnowledgeBaseEntry]", "kind": "member", "signature": "(self, question: str, k: int = 5)", "scope": "RAGService", "scopeKind": "class"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-2867-2878/faq_backend/api/services.py", "pattern": "/^    def search(self, query: str, top_k: int = 5) -> List[Tuple[int, float]]:$/", "language": "Python", "typeref": "typename:List[Tuple[int,float]]", "kind": "member", "signature": "(self, query: str, top_k: int = 5)", "scope": "SimpleVectorIndex", "scopeKind": "class"}], "hash": "91baa845f9a6cdf79f41013b9370e348", "format-version": 4, "code-base-name": "faq_backend", "filename": "faq_backend/api/services.py", "fields": [{"name": "rag_service = RAGService()", "scope": "", "scopeKind": "", "description": "unavailable"}]}